//
//  ContentView.swift
//  MyMonopoly
//
//  Created by ËãèÊõ¶ on 2021/6/28.
//

import SwiftUI

struct GameKyes {
    static let keyPlayers = "playersKey"
    static let keyNum = "numKey"
    static let keyTrans = "transKey"
    static let keyDeposit = "depositKey"
    static let keyWithdrawal = "withdrawalKey"
}

let Chances = [
    Text("ÂâçËøõÂà∞„ÄêÊµÆÊ°•„ÄëÊñπÊ†º"),
    Text("Ëµ∞‰∏ÄË∂üÂà∞„ÄêÈõ∑‰∏ÅÈìÅË∑Ø„ÄëÊñπÊ†º„ÄÇÂ¶ÇÊûúÈÄîÂæÑ„ÄêËµ∑ÁÇπ„ÄëÔºåÈ¢ÜÂèñ$200„ÄÇ"),
    Text("‰Ω†ÁöÑÊàøÂ±ãË¥∑Ê¨æÂà∞Êúü‰∫ÜÔºåÈ¢ÜÂèñ$150„ÄÇ"),
    Text("ÂâçËøõÂà∞„Äê‰ºäÂà©ËØ∫‰ºäÂ∑ûÂ§ßÈÅì„Äë„ÄÇÂ¶ÇÊûúÈÄîÂæÑ„ÄêËµ∑ÁÇπ„ÄëÔºåÈ¢ÜÂèñ$200„ÄÇ"),
    Text("ÂâçËøõÂà∞Â∞±ËøëÁöÑÂÖ¨ÂÖ±‰∫ã‰∏ö„ÄÇÂ¶ÇÊûúÊòØËá™ÊúâÁâ©‰∏öÔºå‰Ω†ÂèØ‰ª•ÈÄâÊã©ÂêëÈì∂Ë°åË¥≠ÂÖ•ÂÆÉÔºõÂ¶ÇÊûúÊòØÂÖ∂‰ªñÂèÇÂä†ËÄÖÊã•ÊúâÂÆÉÔºåÂøÖÈ°ªÊîØ‰ªòÁßüÈáëÁªôËØ•ÂèÇÂä†ËÄÖÔºåËÄåÁßüÈáëÊòØÈ™∞Â≠êÁöÑÁÇπÊï∞‰πòÂçÅÂÄç„ÄÇ"),
    Text("ÂÖ≥ËøõÁõëÁã±„ÄÇÁ´ãÂç≥ÂÖ•Áã±Ôºå‰∏çÈ°ªÈÄîÂæÑ„ÄêËµ∑ÁÇπ„ÄëÔºå‰∏çÂèØ‰ª•È¢ÜÂèñ$200„ÄÇ"),
    Text("ÂâçËøõ„ÄêËµ∑ÁÇπ„Äë„ÄÇÔºàÈ¢ÜÂèñ$200Ôºâ"),
    Text("Ëé∑Èì∂Ë°åÂàÜÊ¥æËÇ°ÊÅØ$50"),
    Text("‰Ω†ÁöÑÊâÄÊúâÁâ©‰∏öËøõË°å‰∏ÄËà¨ÊÄßÁª¥‰øÆÁöÑË¥πÁî®ÔºöÊØè‰∏ÄÊ†ãÊàøÂ≠êÊîØ‰ªò25ÔºåÊØè‰∏ÄÊ†ãÊóÖÈ¶Ü$100„ÄÇ"),
    Text("Ëé∑Âèñ‰∏ÄÂº†ÁõëÁã±ÈÄöË°åËØÅ„ÄÇ"),
    Text("ÂâçËøõÂà∞„ÄêÂú£Êü•Â∞îÊñØÂπøÂú∫„ÄëÊñπÊ†º„ÄÇÂ¶ÇÊûúÈÄîÂæÑ„ÄêËµ∑ÁÇπ„ÄëÔºåÈ¢ÜÂèñ$200„ÄÇ"),
    Text("‰Ω†Â∑≤Ë¢´ÈÄâ‰∏æ‰∏∫Ëë£‰∫ã‰ºö‰∏ªÂ∏≠„ÄÇÊîØ‰ªòÊØè‰∏™ÂèÇÂä†ËÄÖ$50„ÄÇ"),
    Text("ÂÄíÈÄÄ‰∏â‰∏™ÊñπÊ†º„ÄÇ"),
    Text("Ë∂ÖÈÄüË°åÈ©∂ÁΩöÊ¨æ$15"),
    Text("ÂâçËøõÂà∞Â∞±ËøëÁöÑÈìÅË∑Ø„ÄÇÂ¶ÇÊûúÊòØËá™Áî±Áâ©‰∏öÔºå‰Ω†ÂèØ‰ª•ÈÄâÊã©ÂêëÈì∂Ë°åË¥≠ÂÖ•ÂÆÉÔºõÂ¶ÇÊûúÊòØÂÖ∂‰ªñÂèÇÂä†ËÄÖÊã•ÊúâÂÆÉÔºåÂøÖÈ°ªÊîØ‰ªòËØ•ÂèÇÂä†ËÄÖÊâÄËµã‰∫àÊàñÂèØËÉΩÁªô‰∫à‰∏§ÂÄçÁöÑÁßüÈáë„ÄÇ"),
    Text("ÂâçËøõÂà∞Â∞±ËøëÁöÑÈìÅË∑Ø„ÄÇÂ¶ÇÊûúÊòØËá™Áî±Áâ©‰∏öÔºå‰Ω†ÂèØ‰ª•ÈÄâÊã©ÂêëÈì∂Ë°åË¥≠ÂÖ•ÂÆÉÔºõÂ¶ÇÊûúÊòØÂÖ∂‰ªñÂèÇÂä†ËÄÖÊã•ÊúâÂÆÉÔºåÂøÖÈ°ªÊîØ‰ªòËØ•ÂèÇÂä†ËÄÖÊâÄËµã‰∫àÊàñÂèØËÉΩÁªô‰∫à‰∏§ÂÄçÁöÑÁßüÈáë„ÄÇ")
]

let Funds = [
    Text("Ëé∑Âèñ‰∏ÄÂº†ÁõëÁã±ÈÄöË°åËØÅ"),
    Text("ÂåªÁîüË¥πÁî®ÔºåÊîØ‰ªò$50„ÄÇ"),
    Text("ÂÅáÊúüÂü∫ÈáëÂà∞Êúü‰∫ÜÔºåÈ¢ÜÂèñ$100„ÄÇ"),
    Text("‰∫∫ÂØø‰øùÈô©Âà∞Êúü‰∫ÜÔºåÈ¢ÜÂèñ$100„ÄÇ"),
    Text("Â≠¶Ë¥πÔºåÊîØ‰ªò$50„ÄÇ"),
    Text("ÊâÄÂæóÁ®éÈÄÄÁ®éÔºåÊî∂Âèñ$20„ÄÇ"),
    Text("ÂåªÈô¢Ë¥πÁî®ÔºåÊîØ‰ªò$100„ÄÇ"),
    Text("ÂÖ≥ËøõÁõëÁã±„ÄÇÁ´ãÂç≥ÂÖ•Áã±Ôºå‰∏çÈ°ªÈÄîÂæÑ„ÄêËµ∑ÁÇπ„ÄëÔºå‰∏çÂèØ‰ª•È¢ÜÂèñ$200„ÄÇ"),
    Text("È¢ÜÂèñÂí®ËØ¢Ë¥π$25„ÄÇ"),
    Text("ËøôÊòØ‰Ω†ÁöÑÁîüÊó•„ÄÇÂêëÊØè‰∏™‰∫∫ÂèÇÂä†ËÄÖÊî∂Âèñ$10„ÄÇ"),
    Text("‰Ω†ÁªßÊâø$100„ÄÇ"),
    Text("‰Ω†Âá∫ÂîÆËÇ°Á•®Ëé∑Âèñ$50„ÄÇ"),
    Text("‰Ω†Âú®ÈÄâÁæéÊØîËµõËé∑ÂæóÁ¨¨‰∫åÂêçÂ•ñÈ°πÔºåÈ¢ÜÂèñ$10„ÄÇ"),
    Text("‰Ω†Â∑≤ËØÑ‰º∞Ë°óÈÅìÁª¥‰øÆË¥πÁî®ÔºöËá™Â∑±Êã•ÊúâÁöÑÊØè‰∏ÄÊ†ãÊàøÂ≠êÊîØ‰ªò$40ÂèäÊØè‰∏ÄÊ†ãÊóÖÈ¶Ü$115„ÄÇ"),
    Text("ÂâçËøõ„ÄêËµ∑ÁÇπ„Äë„ÄÇÔºàÈ¢ÜÂèñ$200Ôºâ"),
    Text("Èì∂Ë°åÈîôËØØÔºå‰Ω†ÊòØÂèóÁõä‰∫∫ÔºåÈ¢ÜÂèñ$200„ÄÇ")
]


struct ContentView: View {
    @State private var players : [Int] = [20580,10000,0,0,0] // 0:banker, >1: player
    @State private var num = 4
    @State private var trans = 0
    @State private var deposit = 0 //Â≠òÈí±
    @State private var withdrawal = 0 //ÂèñÈí±
    @State private var chance = Array<Int>()
    @State private var fund = Array<Int>()
    @State private var logs : [String] = ["","","","",""]
    
    @State private var reset = false
    @State private var setNum = false
    @State private var showChance = false
    @State private var pChance = 0
    @State private var showFund = false
    @State private var pFund = 0
    
    
    private func finish() -> Void {
        print("\(deposit) \(withdrawal) \(trans)")
        
        logs = ["","","","",""]
        logs[deposit] = "-\(trans)"
        logs[withdrawal] = "+\(trans)"
        
        deposit = 0
        withdrawal = 0
        trans = 0
    }
    private func next(_ player : Int) -> Int {
        if player >= num {
            return 0
        }else {
            return player + 1
        }
    }
    private func newGame(_ n: Int) -> Void {
        players[0] = 20580
        for i in 1 ... n {
            players[i] = 1500
        }
        num = n
        deposit = 0
        withdrawal = 0
        trans = 0
        chance = Array<Int>()
        fund = Array<Int>()
        logs = ["","","","",""]
        setNum = false
    }
    private func shuffle() -> Array<Int> {
        var cards = Array(arrayLiteral: 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
        for _ in 1...Int.random(in:10...20) {
            for i in 0...cards.count - 1 {
                cards.swapAt(Int.random(in: 0...15), i)
            }
        }
        return cards
    }
    
    var body: some View {
        VStack() {
            VStack {
                VStack {
                        if (num > 1){
                            
                            HStack(alignment: .bottom) {
                                Text("üö§")
                                Spacer()
                                Text(logs[1]).font(.title3)
                                Text(String(players[1]))
                                    .frame(minWidth: 100, idealWidth: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxWidth: 100, minHeight: 0, idealHeight: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxHeight: .infinity, alignment: .trailing)
                                Text("M")
                                    .font(.callout)
                            }
                            .frame(height: 40.0)
                            .foregroundColor(.red)
                            .font(.largeTitle)
                        }
                        if (num >= 2) {
                            
                            HStack(alignment: .bottom) {
                                Text("üõª")
                                Spacer()
                                Text(logs[2]).font(.title3)
                                Text(String(players[2]))
                                    .frame(minWidth: 100, idealWidth: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxWidth: 100, minHeight: 0, idealHeight: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxHeight: .infinity, alignment: .trailing)
                                Text("M").font(.callout)
                            }
                            .frame(height: 40.0).foregroundColor(.yellow).font(.largeTitle)
                        }
                        if (num >= 3) {
                            
                            HStack(alignment: .bottom) {
                                Text("üêé")
                                Spacer()
                                Text(logs[3]).font(.title3)
                                Text(String(players[3]))
                                    .frame(minWidth: 100, idealWidth: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxWidth: 100, minHeight: 0, idealHeight: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxHeight: .infinity, alignment: .trailing)
                                Text("M").font(.callout)
                            }
                            .frame(height: 40.0).foregroundColor(.blue).font(.largeTitle)
                        }
                        if (num >= 4) {
                            
                            HStack(alignment: .bottom) {
                                Text("üêà‚Äç‚¨õ")
                                Spacer()
                                Text(logs[4]).font(.title3)
                                Text(String(players[4]))
                                    .frame(minWidth: 100, idealWidth: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxWidth: 100, minHeight: 0, idealHeight: /*@START_MENU_TOKEN@*/100/*@END_MENU_TOKEN@*/, maxHeight: .infinity, alignment: .trailing)
                                Text("M").font(.callout)
                            }
                            .frame(height: 40.0).foregroundColor(.green).font(.largeTitle)
                        }
                    Spacer()
                    HStack(alignment: .center) {
                        Button(action: {
                            withdrawal = next(withdrawal)
                            if withdrawal == deposit && withdrawal != 0 {
                                withdrawal = next(withdrawal)
                                
                            }
                        }, label: {
                            switch withdrawal {
                            case 1: Text("üö§")
                            case 2: Text("üõª")
                            case 3: Text("üêé")
                            case 4: Text("üêà‚Äç‚¨õ")
                            default:
                                Text("üè¶")
                            }
                        }).frame(width:60).font(.largeTitle)
                        Spacer()
                        Text(String(trans))
                            .lineLimit(1).foregroundColor(.black)
                            .font(.custom("DBLCDTempBlack", size: 36))
                            .lineSpacing(-20)
                        Spacer()
                        Button(action: {
                            deposit = next(deposit)
                            if deposit == withdrawal && deposit != 0 {
                                deposit = next(deposit)
                            }
                        }, label: {
                            switch deposit {
                            case 1: Text("üö§")
                            case 2: Text("üõª")
                            case 3: Text("üêé")
                            case 4: Text("üêà‚Äç‚¨õ")
                            default:
                                Text("üè¶")
                            }
                        }).frame(width: 60.0).font(.largeTitle)
                       
                    }
                }.padding().background(Color(red: 161/255, green: 153/255, blue: 138/255))
            }
            .padding(.all, 24.0)

            
            VStack {
                HStack(alignment: .center) {
                    Button(action: {
                        if deposit != 0 || withdrawal != 0 {
                            players[deposit] -= trans
                            players[withdrawal] += trans
                            finish()
                        }
                    }, label: {
                        Text("ü§ù").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {
                            if withdrawal > 0 {
                                trans = 200
                                players[withdrawal] += trans
                                finish()
                            }
                    },label: {
                        Text("‚üµ").font(.largeTitle).fontWeight(.bold).foregroundColor(Color.orange).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {trans = trans / 10}, label: {
                        Text("C").font(.largeTitle).fontWeight(.black).foregroundColor(Color.white).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    .alert(isPresented: $reset, content: {
                        Alert(
                            title: Text("Ë¶ÅÈáçÁΩÆÊ∏∏ÊàèÂêó?ÂΩìÂâçÊ∏∏ÊàèÊï∞ÊçÆ‰ºö‰∏¢Â§±!"),
                            primaryButton: .default(Text("Ë¶Å"), action: {
                                players = [20580,0,0,0,0]
                                num = 4
                                trans = -1
                                setNum = true
                            }),
                            secondaryButton: .default(Text("‰∏çË¶Å")))
                    })
                    .simultaneousGesture(LongPressGesture().onEnded({ _ in
                        reset = true
                    }))
                }
                .padding(.all, 3.0)
                
                HStack() {
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 7}, label: {
                            Text("7").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 8}, label: {
                        Text("8").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                            
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 9}, label: {
                        Text("9").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                }
                .padding(.all, 3.0)
                HStack() {
                    Button(action: {
                        if setNum {
                            newGame(4)
                            return
                        }
                        if trans > 2058 {
                            return
                            
                        }
                        if trans > 2058 {
                            return
                        }
                        trans = trans * 10 + 4
                        
                    }, label: {
                            Text("4").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 5},label: {
                        Text("5").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                            
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 6}, label: {
                        Text("6").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                }
                .padding(.all, 3.0)
                HStack() {
                    Button(action: {
                        if trans > 2058 || setNum {
                            return
                        }
                        trans = trans * 10 + 1
                        
                    }, label: {
                            Text("1").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {
                        if setNum {
                            newGame(2)
                            return
                        }
                        if trans > 2058 {
                            return
                        }
                        trans = trans * 10 + 2
                        
                    }, label: {
                        Text("2").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                            
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {
                        if setNum {
                            newGame(3)
                            return
                        }
                        if trans > 2058 {
                            return
                        }
                        trans = trans * 10 + 3
                        
                    }, label: {
                        Text("3").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                }
                .padding(.all, 3.0)
                HStack() {
                    Button(action: {}, label: {
                        Text("‚ùì").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    }).background(Color.gray)
                    .alert(isPresented: $showChance, content: {
                        Alert(title: Chances[pChance].bold())
                    })
                    .simultaneousGesture(LongPressGesture().onEnded({ _ in
                        if chance.isEmpty {
                            chance = shuffle()
                        }
                        pChance = chance.popLast()!
                        showChance = true
                    }))
                    Spacer()
                    Button(action: {if trans > 2058 || setNum {return};trans = trans * 10 + 0}, label: {
                        Text("0").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                            
                    }).background(Color.gray)
                    Spacer()
                    Button(action: {}, label: {
                        Text("üí≤").font(.largeTitle).fontWeight(.black).frame(width: 80, height: 80, alignment: .center)
                    })
                    .background(Color.gray)
                    .alert(isPresented: $showFund, content: {
                        Alert(title: Funds[pFund].bold())
                    })
                    .simultaneousGesture(LongPressGesture().onEnded({ _ in
                        if fund.isEmpty {
                            fund = shuffle()
                        }
                        pFund = fund.popLast()!
                        showFund = true
                    }))
                }
                .padding(.all, 3.0)
            }
            .padding()
        }.preferredColorScheme(.dark)
    }
}


struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
